[gcode_macro PRINT_START]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    {% set PREHEAT_TEMP = client.preheat_temp|default(170)|float %}
    {% set ADAPTIVE_BED = client.adaptive_bed|default(True) %}

    # Check if Filament is present
    {% if (printer['filament_switch_sensor runout_sensor'].filament_detected|lower == 'false')%}
        CANCEL_PRINT
    {% else %}
        SAVE_GCODE_STATE NAME=state_print_start
        M107                                # Fan off
        M140 S{BED_TEMP}                    # Start heating Bed
        M104 S{PREHEAT_TEMP}                # Start preheating Extruder
        M109 S{PREHEAT_TEMP}                # Wait for Extruder Temp

        CLEAR_PAUSE                         # Clears Pause state, recommended if cancle a print in Pause state
        HOME_and_PARK                       # Homing and Park on Clean Position
        # PARKFRONT                         # Homing with park Position for better cleaning

        G21                                 # Units in mm
        G90                                 # All axis in Absolute Mode
        M83                                 # Extruder in Relative Mode

        M190 S{BED_TEMP}                    # Wait for Bed Temp

        BED_MESH_CLEAR
        G28

        {% if ADAPTIVE_BED %}
            BED_MESH_CALIBRATE ADAPTIVE=1   # Generate Adaptive Bed Mesh
        {% else %}
            BED_MESH_PROFILE LOAD=default   # or load default Mesh
        {% endif %}

        SMART_PARK

        M104 S{EXTRUDER_TEMP}               # Start heating Extruder
        M109 S{EXTRUDER_TEMP}               # Wait for Extruder Temp

        LINE_PURGE
        G92 E0.0                            # Zero Extruder
        RESTORE_GCODE_STATE NAME=state_print_start
    {% endif %}


[gcode_macro PRINT_END]
gcode:
    _TOOLHEAD_PARK_PAUSE_CANCEL     # Park
    M84 X Y E                       # Disable steppers
    TURN_OFF_HEATERS                # Disable heaters
    M106 S0                         # Disable fans
    BED_MESH_CLEAR                  # Clear bed mesh

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(20)|int %}                                                      # z hop amount
    {% set retract = params.RETRACT|default(True) %}                                            # default, do a retract
    {% set unload = params.UNLOAD|default(False) %}                                              # default, do a retract
    {% set fan_speed = (printer.fan.speed * 255)|int %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                 # set zhop variable for referenze in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}       # set hotend temp for referenze in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_fan VALUE={fan_speed}                  # set fan speed
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=detract VALUE={retract}                        # set fan speed

        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_x VALUE={printer.gcode_move.position.x}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_y VALUE={printer.gcode_move.position.y}  # save positions for manual restore
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_z VALUE={printer.gcode_move.position.z}

        # SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0                                       # disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                             # save current print position for resume
        BASE_PAUSE                                                                              # Pause print
        
        {% if retract %}
            _CLIENT_RETRACT                                                                     # get filament in coldend
        {% endif %}

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{z} F900
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                     # i z max is exceeded, show message ans set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}

        G90                                                                                     # absolute positioning
        # G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000      # park toolhead at front center
        G1 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_minimum.y+5} F6000

        {% if unload %}
            G91
            G1 E-100 F3600                                                                      # Unload if requested
        {% endif %}
        
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                         # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)

        M104 S0                                                                                 # turn off heater
        M106 S0                                                                                 # turn off fan
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                          # set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
variable_detract: True
variable_restore_fan: 255
variable_restore_x: 0
variable_restore_y: 0
variable_restore_z: 0
gcode:
    # Parameters
    {% set e = params.E|default(10)|int %}                                                  # Hotend prime amount, default 2.5
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                   # rapid movement to break strings

    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1                                   # enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout }        # set timeout back to configured value
        
        M109 S{etemp|int}                                                                   # wait for hotend to heat back up
        M106 S{restore_fan}                                                                 # restore fan speed

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                            # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)

        {% if detract %}
            _CLIENT_EXTRUDE                                                                 # get filament in Hotend
            _CLIENT_EXTRUDE LENGTH={e}                                                      # prime the nozzle
        {% endif %}

        G4 P5000                                                                            # 5 Sekunden warten zum reinigen der DÃ¼se
        G90                                                                                 # absolute position
        G1 X{restore_x} Y{restore_y} F2000                                                  # move on XY
        G1 Z{restore_z} F2000                                                               # move on Z

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=0                                               # retsore position settings
        BASE_RESUME                                                                         # resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout }                # set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT